# DB
DATABASE_URL=postgresql://postgres:postgres@db:5432/hermes_dev

# Market data APIs - replace the placeholder values with your keys
# IMPORTANT: Do NOT commit real API keys to version control. Keep secrets in
# `backend/.env` (which should be gitignored) or a secrets manager.
BINANCE_KEY=your_binance_api_key_here
BINANCE_API_SECRET=your_binance_api_secret_here
ALPHAVANTAGE_KEY=your_alpha_vantage_key_here
NEWSAPI_KEY=your_newsapi_key_here

# Redis (optional but recommended for production / multi-worker rate-limiting & caching)
# Example: REDIS_URL=redis://redis:6379/0  (the docker-compose file includes a redis service)
REDIS_URL=redis://redis:6379/0

# Free-tier guidance (these are typical conservative defaults; tune as needed):
# - Alpha Vantage free: ~5 requests per minute (rpm). Keep alpha_vantage requests <=5/min.
# - NewsAPI free: small daily quota (e.g., ~100 requests/day). Cache news responses.
# - Binance: prefer websocket streams for real-time ticks; REST endpoints are rate-limited
#   and weight-based â€” avoid per-symbol frequent polling via REST on free plans.

# Runtime controls you can use in your backend to respect free-tier limits:
# POLL intervals in seconds for different timeframes (safe defaults):
POLL_INTERVAL_1M=60       # fetch/update 1m candles at most once per minute
POLL_INTERVAL_5M=300      # 5 minutes
POLL_INTERVAL_1H=3600     # 1 hour

# Scanning / batch controls:
# SCAN_BATCH_SIZE controls how many symbols to fetch per minute during a market scan
SCAN_BATCH_SIZE=5

# Rate-limit knobs (informational; enforce these in code):
ALPHAVANTAGE_RPM=5
NEWSAPI_RPD=100
BINANCE_REST_RPS=5

# Example: set LOG_LEVEL=DEBUG for verbose logs during development
LOG_LEVEL=INFO
